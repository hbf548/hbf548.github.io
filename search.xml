<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>单核与多核cpu</title>
      <link href="/2021/08/25/%E5%8D%95%E6%A0%B8%E4%B8%8E%E5%A4%9A%E6%A0%B8cpu/"/>
      <url>/2021/08/25/%E5%8D%95%E6%A0%B8%E4%B8%8E%E5%A4%9A%E6%A0%B8cpu/</url>
      
        <content type="html"><![CDATA[<ul><li>单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。例如:虽然有多车道，但是收费站只有一个工作人员在收费，只有收了费才能通过，那么CPU就好比收费人员。如果有某个人不想交钱，那么收费人员可以把他“挂起”(晾着他，等他想通了，准备好了钱，再去收费)。但是因为CPU时间单元特别短，因此感觉不出来。</li><li>如果是多核的话，才能更好的发挥多线程的效率。(现在的服务 器都是多核的)</li><li>一个Java应用程序java.exe， 其实至少有三个线程: main():主线程，gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。</li></ul><p><strong>并行：多个CPU同时执行多个任务。比如:多个人同时做不同的事。</strong><br /><strong>并发：一个CPU(采用时间片)同时执行多个任务。比如:秒杀、多个人做同一件事。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单核与多核cpu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程和线程的区别</title>
      <link href="/2021/08/25/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2021/08/25/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<ul><li>说起进程，就不得不说下程序。程序是指令和数据的有序集合，其本身没有任何运行的含义，是一 个静态的概念。</li><li>而进程则是执行程序的一次执行过程，它是一个动态的概念。是系统资源分配的单位</li><li>通常在一个进程中可以包含若干个线程，当然一个进程中至少有一 个线程， 不然没有存在的意义。线程是CPU调度和执行的的单位。</li></ul><p>核心概念：<br>线程就是独立的执行路径;<br>在程序运行时，即使没有自己创建线程，后台也会有多个线程,如主线程，gc线程;<br>main()称之为主线程，为系统的入口，用于执行整个程序;<br>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能认为的干预的。<br>对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制; .<br>线程会带来额外的开销，如cpu调度时间，并发控制开销。<br>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致</p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进程和线程的区别 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
