<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线程池</title>
      <link href="/2021/08/27/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2021/08/27/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<p>使用背景：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。<br>思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。</p><p><a name="WOUH9"></a></p><h1 id="使用线程池的好处"><a href="#使用线程池的好处" class="headerlink" title="使用线程池的好处"></a>使用线程池的好处</h1><p><strong>好处：</strong></p><ul><li><strong>提高响应速度(减少了创建新线程的时间)</strong></li><li><strong>降低资源消耗(重复利用线程池中线程，不需要每次都创建)</strong></li><li><strong>便于线程管理(…</strong><ul><li><strong>corePoolSize: 核心池的大小</strong></li><li><strong>maximumPoolSize:最大线程数</strong></li><li><strong>keepAliveTime:线程没有任务时最多保持多长时间后会终止</strong></li></ul></li></ul><p><strong>​</strong><br><br><a name="BuXxM"></a></p><h1 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h1><ul><li>JDK 5.0起提供了线程池相关APl: <code>ExecutorService</code>和<code>Executors</code></li><li>ExecutorService真正的线程池接口。常见子类ThreadPoolExecutor<ul><li><font color="red">void execute(Runnable command) ：执行任务/命令,</font>没有返回值，一般用来执行Runnable</li><li><font color="red"><T> Future<T> submit(Callable<T> task)：执行任务，有返回值，一般又来执行Callable</T></T></T></font></li><li><font color="red">void shutdown()</font> ：关闭连接池</li></ul></li><li>Executors: 工具类、线程池的工厂类，用于创建并返回不同类型的线程池<br><a name="y95rp"></a><h2 id="方式一：实现Runnable接口"><a href="#方式一：实现Runnable接口" class="headerlink" title="方式一：实现Runnable接口"></a>方式一：实现Runnable接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testpool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建线程池</span></span><br><span class="line">        <span class="comment">//newFixedThreadPool 参数是：池子的大小</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/08/27/%E7%BA%BF%E7%A8%8B%E6%B1%A0/1627145779369-b7366937-1266-45a2-9b47-7674ab19b3e8.png" alt="image.png" style="zoom: 67%;"><br>可以看见4个池子<br></li></ul><br><a name="JrEe0"></a>## 方式二：实现Callable接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumThread</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        Future submit = service.submit(<span class="keyword">new</span> NumThread());</span><br><span class="line">        Future submit1 = service.submit(<span class="keyword">new</span> NumThread());</span><br><span class="line">        Future submit2 = service.submit(<span class="keyword">new</span> NumThread());</span><br><span class="line"></span><br><span class="line">        System.out.println(submit.get());</span><br><span class="line">        System.out.println(submit1.get());</span><br><span class="line">        System.out.println(submit2.get());</span><br><span class="line">        service.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><img src="/2021/08/27/%E7%BA%BF%E7%A8%8B%E6%B1%A0/1627278958992-da0d31b5-df46-4835-b3cf-6e2c151ee0dc.png" alt="image.png" style="zoom:67%;"><br><br><br><a name="sDnwW"></a></p><h1 id="创建线程池的4种方法"><a href="#创建线程池的4种方法" class="headerlink" title="创建线程池的4种方法"></a>创建线程池的4种方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</span><br><span class="line">容量大小为：Integer.MAX_VALUE</span><br><span class="line"><span class="number">1</span>.newCachedThreadPool</span><br><span class="line"></span><br><span class="line">创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</span><br><span class="line"><span class="number">2</span>.newFixedThreadPool </span><br><span class="line"></span><br><span class="line">创建一个定长线程池，支持定时及周期性任务执行。</span><br><span class="line"><span class="number">3</span>.newScheduledThreadPool</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，</span></span><br><span class="line">保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</span><br><span class="line"><span class="number">4</span>..newSingleThreadExecutor</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumThread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*    @Override</span></span><br><span class="line"><span class="comment">    public void run() &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(Thread.currentThread().getName());</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cached</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line">        cachedThreadPool.submit(<span class="keyword">new</span> NumThread1());</span><br><span class="line">        cachedThreadPool.submit(<span class="keyword">new</span> NumThread1());</span><br><span class="line">        cachedThreadPool.submit(<span class="keyword">new</span> NumThread1());</span><br><span class="line">        cachedThreadPool.submit(<span class="keyword">new</span> NumThread1());</span><br><span class="line">        cachedThreadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/08/27/%E7%BA%BF%E7%A8%8B%E6%B1%A0/1627280636030-8f8dca99-4742-4453-9898-1702350eabdd.png" alt="image.png" style="zoom:67%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService cachedThreadPool = Executors.newScheduledThreadPool(<span class="number">3</span>);</span><br><span class="line">cachedThreadPool.submit(<span class="keyword">new</span> NumThread1());</span><br><span class="line">cachedThreadPool.submit(<span class="keyword">new</span> NumThread1());</span><br><span class="line">cachedThreadPool.submit(<span class="keyword">new</span> NumThread1());</span><br><span class="line">cachedThreadPool.submit(<span class="keyword">new</span> NumThread1());</span><br><span class="line">cachedThreadPool.shutdown();</span><br></pre></td></tr></table></figure><img src="/2021/08/27/%E7%BA%BF%E7%A8%8B%E6%B1%A0/1627280801287-1d95308e-dd93-484c-8f3b-6f28e53f5813.png" alt="image.png" style="zoom:67%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService cachedThreadPool = Executors.newSingleThreadExecutor();</span><br><span class="line">cachedThreadPool.submit(<span class="keyword">new</span> NumThread1());</span><br><span class="line">cachedThreadPool.submit(<span class="keyword">new</span> NumThread1());</span><br><span class="line">cachedThreadPool.submit(<span class="keyword">new</span> NumThread1());</span><br><span class="line">cachedThreadPool.submit(<span class="keyword">new</span> NumThread1());</span><br><span class="line">cachedThreadPool.shutdown();</span><br></pre></td></tr></table></figure><p><br><img src="/2021/08/27/%E7%BA%BF%E7%A8%8B%E6%B1%A0/1627280867639-3d9fded9-07d4-46ae-9cc4-b2ab5014f5c5.png" alt="image.png" style="zoom:67%;"><br><a name="jAbHB"></a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadNew</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyThread1().start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread2()).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;Integer&gt;(new MyCallable());</span></span><br><span class="line"><span class="comment">        new Thread(futureTask).start();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            System.out.println(futureTask.get());</span></span><br><span class="line"><span class="comment">        &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        Future submit = service.submit(<span class="keyword">new</span> MyCallable());</span><br><span class="line">        System.out.println(submit.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/08/27/%E7%BA%BF%E7%A8%8B%E6%B1%A0/1627146838831-5906203a-eaed-4ace-8a62-32acd29c4b69.png" alt="image.png" style="zoom:67%;">]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生产者消费者解决方式</title>
      <link href="/2021/08/27/%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F%EF%BC%9A/"/>
      <url>/2021/08/27/%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F%EF%BC%9A/</url>
      
        <content type="html"><![CDATA[<p><a name="P2aBo"></a></p><h1 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h1><p><img src="/2021/08/27/%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F%EF%BC%9A/1627137701665-87f953b0-9123-43be-900e-37c4f98479d3.png" alt="image.png"><br><br><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProductor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Storage storage = <span class="keyword">new</span> Storage();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Producer(storage),<span class="string">"p1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Consumer(storage),<span class="string">"c1"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Storage storage;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Storage storage)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.storage = storage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                storage.put();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Storage storage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Storage storage)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.storage = storage;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                storage.pop();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//仓库</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Storage</span></span>&#123;</span><br><span class="line">    <span class="comment">// 仓库容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SIZE = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 仓库存储的载体</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Object&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line">            <span class="keyword">while</span> (list.size()+<span class="number">1</span>  &gt; MAX_SIZE) &#123;</span><br><span class="line">                System.out.println(<span class="string">"【生产者"</span> + Thread.currentThread().getName()</span><br><span class="line">                        + <span class="string">"】仓库已满,"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    list.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(<span class="keyword">new</span> Object());</span><br><span class="line">            System.out.println(<span class="string">"【生产者"</span> + Thread.currentThread().getName()</span><br><span class="line">                    + <span class="string">"】生产一个产品，现库存"</span> + list.size());</span><br><span class="line">            list.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line">            <span class="keyword">while</span> (list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                 System.out.println(<span class="string">"【消费者"</span> + Thread.currentThread().getName()</span><br><span class="line">                        + <span class="string">"】仓库为空，消费了0个产品"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    list.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            list.remove();</span><br><span class="line">            System.out.println(<span class="string">"【消费者"</span> + Thread.currentThread().getName()</span><br><span class="line">                    + <span class="string">"】消费一个产品，现库存："</span> + list.size());</span><br><span class="line">            list.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="jvXud"></a></p><h1 id="方式二：信号灯法"><a href="#方式二：信号灯法" class="headerlink" title="方式二：信号灯法"></a>方式二：信号灯法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生产者消费者：标志位</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPC2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CubbyHole cubbyHole = <span class="keyword">new</span> CubbyHole(<span class="string">"橘子"</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Producers(cubbyHole),<span class="string">"p1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Consumers(cubbyHole),<span class="string">"c1"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumers</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    CubbyHole cubbyHole = <span class="keyword">new</span> CubbyHole();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumers</span><span class="params">(CubbyHole cubbyHole)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cubbyHole = cubbyHole;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            cubbyHole.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producers</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    CubbyHole cubbyHole = <span class="keyword">new</span> CubbyHole();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producers</span><span class="params">(CubbyHole cubbyHole)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cubbyHole = cubbyHole;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            cubbyHole.put();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CubbyHole</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 仓库容量</span></span><br><span class="line">     <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">     String apple;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CubbyHole</span><span class="params">(String apple)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.apple = apple;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CubbyHole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"生产者生产了"</span> + apple);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">this</span>.apple = apple;</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"消费者消费了"</span> + apple);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生产者消费者解决方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生产者消费者问题</title>
      <link href="/2021/08/27/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/"/>
      <url>/2021/08/27/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><img src="/2021/08/27/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/1627136817508-ba649a7a-391d-433c-9ec8-2ef23ede2cb9.png" alt="image.png"><br></p><p>这是一个线程同步问题,生产者和消费者共享同一个资源，并且生产者和消费者之<br>间相互依赖，互为条件。</p><ul><li>对于生产者，没有生产产品之前,要通知消费者等待.而生产了产品之后,又<br>需要马。上通知消费者消费</li><li>对于消费者，在消费之后,要通知生产者已经结束消费,需要生产新的产品<br>以供消费。</li><li>在生产者消费者问题中，仅有synchronized是不够的<ul><li><font color="red">synchronized可阻止并发更新同一个共享资源，实现了同步</font> </li><li><font color="red">synchronized 不能用来实现不同线程之间的消息传递(通信)</font> </li></ul></li></ul><p><a name="zKrhZ"></a></p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生产者消费者问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决线程之间的通信问题</title>
      <link href="/2021/08/27/%E8%A7%A3%E5%86%B3%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%E9%97%AE%E9%A2%98/"/>
      <url>/2021/08/27/%E8%A7%A3%E5%86%B3%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><a name="zKrhZ"></a></p><h1 id><a href="#" class="headerlink" title></a></h1><p><img src="/2021/08/27/%E8%A7%A3%E5%86%B3%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%E9%97%AE%E9%A2%98/1627137048714-27d7e8b4-5326-4876-b5a5-7e6641cf98e5.png" alt="image.png"><br><font color="red">均是0bject类的方法,都只能在同步方法或者同步代码块中使用，否则会抛出异常IllegalMonitorStateException</font></p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解决线程之间的通信问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Synchronized 和 Lock锁的区别</title>
      <link href="/2021/08/27/Synchronized%20%E5%92%8C%20Lock%E9%94%81%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2021/08/27/Synchronized%20%E5%92%8C%20Lock%E9%94%81%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>相同点：</p><ul><li>都能解决线程安全问题</li></ul><p>不同点：</p><ul><li>synchronized是关键字，是JVM层面的底层啥都帮我们做了，而Lock是一个接口，是JDK层面的有丰富的API。</li><li>Lock是显式锁(手动开启和关闭锁，别忘记关闭锁)， synchronized是隐式锁， 出了作用域自动释放</li><li>Lock手动开启和关闭锁，synchronized是自动释放</li><li>Lock只有代码块锁，synchronized有代码块锁和方法锁</li><li>synchronized是不可中断的，Lock可以中断也可以不中断</li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性(提供更多的子类)</li></ul><p>优先使用顺序:<br>Lock &gt;同步代码块(已经进入了方法体，分配了相应资源) &gt;同步方法(在方法体之外)</p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Synchronized 和 Lock锁的区别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lock锁</title>
      <link href="/2021/08/27/Lock%E9%94%81/"/>
      <url>/2021/08/27/Lock%E9%94%81/</url>
      
        <content type="html"><![CDATA[<ul><li>从JDK 5.0开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当</li><li>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象</li><li>ReentrantLock类实现了Lock ，它拥有与synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是Reentrantl ock,可以显式加锁、释放锁。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lock锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testlock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Testlock02 testlock02 = <span class="keyword">new</span> Testlock02();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(testlock02).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testlock02).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testlock02).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Testlock02</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> tickNum = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义lock锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();<span class="comment">//加锁</span></span><br><span class="line">                <span class="keyword">if</span>(tickNum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"拿到了第"</span> + tickNum-- + <span class="string">"张票"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//解锁</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/08/27/Lock%E9%94%81/1627136461799-4a64853f-dca1-4489-8506-e6029f7a7e56.png" alt="image.png" style="zoom:50%;"> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lock锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死锁</title>
      <link href="/2021/08/27/%E6%AD%BB%E9%94%81/"/>
      <url>/2021/08/27/%E6%AD%BB%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p><a name="c1hbv"></a></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而导致两个或者多个线程都在等待对方释放资源，都停止执行的情形.。某一个同步块同时拥有“两个以上对象的锁”时，就可能会发生“死锁”的问题.<br>​</p><p><strong><font color="red">总而言之就是：多个线程互相抱着对方需要的资源，然后形成僵持</font></strong></p><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//死锁：多个线程互相抱着对方需要的资源，然后形成僵持</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Makeup g1 = <span class="keyword">new</span> Makeup(<span class="number">0</span>,<span class="string">"灰姑娘"</span>);</span><br><span class="line">        Makeup g2 = <span class="keyword">new</span> Makeup(<span class="number">1</span>,<span class="string">"白雪公主"</span>);</span><br><span class="line"></span><br><span class="line">        g1.start();</span><br><span class="line">        g2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//口红</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lipstick</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//镜子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mirror</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Makeup</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要的资源只有一份，用static来保证只有一份</span></span><br><span class="line">    <span class="keyword">static</span> Lipstick lipstick = <span class="keyword">new</span> Lipstick();</span><br><span class="line">    <span class="keyword">static</span> Mirror mirror = <span class="keyword">new</span> Mirror();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> chioce;<span class="comment">//选择</span></span><br><span class="line">    String girlName; <span class="comment">//使用化妆品的人</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Makeup</span><span class="params">(<span class="keyword">int</span> chioce, String girlName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.chioce = chioce;</span><br><span class="line">        <span class="keyword">this</span>.girlName = girlName;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//化妆</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            makeup();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//化妆,互相持有对方的锁，就是需要拿到对方的资源</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (chioce == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick)&#123; <span class="comment">//获得口红的锁</span></span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName+<span class="string">"获得口红的锁"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);<span class="comment">//1秒后获得镜子的锁</span></span><br><span class="line">                <span class="keyword">synchronized</span> (mirror)&#123; <span class="comment">//获得镜子的锁</span></span><br><span class="line">                    System.out.println(<span class="keyword">this</span>.girlName+<span class="string">"获得镜子的锁"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror)&#123; <span class="comment">//获得镜子的锁</span></span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName+<span class="string">"获得镜子的锁"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (lipstick)&#123; <span class="comment">//获得口红的锁</span></span><br><span class="line">                    System.out.println(<span class="keyword">this</span>.girlName+<span class="string">"获得口红的锁"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/411176/1627134953930-4155f619-8343-4866-a5aa-1660c999113a.png#clientId=u8f6b7384-e61d-4&from=paste&height=227&id=u1ba3368c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=227&originWidth=826&originalType=binary&ratio=1&size=15393&status=done&style=none&taskId=u4de9a2f7-e987-4ac8-b0d1-e17501aac79&width=826" alt="image.png"><br>发现程序卡死了，死锁！原因很简单：<br>灰姑娘 和 白雪公主都需要对方的支援来释放锁，互相不谦让，导致死锁。<br><a name="OnsYY"></a></p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>那就是两个人不要去抱对方的锁就行了，这样就有一个人先释放资源，从而解决死锁<br>​</p><p><img src="/2021/08/27/%E6%AD%BB%E9%94%81/1627134953930-4155f619-8343-4866-a5aa-1660c999113a.png" alt="image.png"><br><br><br><a name="He1H5"></a></p><h1 id="产生死锁的条件"><a href="#产生死锁的条件" class="headerlink" title="产生死锁的条件"></a>产生死锁的条件</h1><p>产生死锁的四个必要条件: </p><ol><li>互斥条件: 一个资源每次只能被一个进程使用。</li><li>请求与保持条件: 一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件 :进程已获得的资源，在末使用完之前，不能强行剥夺。</li><li>循环等待条件 :若干进程之间形成一种头尾相接的循环等待资源关系。</li></ol><p>上面列出了死锁的四个必要条件，我们只要想办法破其中的任意一个或多个条件就可以避免死锁发生！</p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 死锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同步方法及同步块</title>
      <link href="/2021/08/27/%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E5%8F%8A%E5%90%8C%E6%AD%A5%E5%9D%97/"/>
      <url>/2021/08/27/%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E5%8F%8A%E5%90%8C%E6%AD%A5%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p><a name="BTOol"></a></p><h1 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h1><p>由于我们可以通过<code>private</code>关键字来保证数据对象只能被方法访问,所以我们只需要针对方法提出一套机制,这套机制就是<code>synchronized</code>关键字,它包括两种用法:<br><code>synchronized</code>方法 和 <code>synchronized</code>块。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">同步方法：</span><br><span class="line"><span class="comment">//synchronized 同步方法，锁的是this对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">synchronized方法控制对“对象”的访问,每个对象对应一把锁，</font>每个 <code>synchronized</code> 方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行<br><a name="q5RQj"></a></p><h2 id="同步方法缺点"><a href="#同步方法缺点" class="headerlink" title="同步方法缺点"></a>同步方法缺点</h2><p>缺点：若将一个大的方法申明为<code>synchronized</code> 将会影响效率。<br>​</p><p>方法里需要修改的内容才需要锁，锁太多，浪费资源<br>​</p><p><img src="/2021/08/27/%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E5%8F%8A%E5%90%8C%E6%AD%A5%E5%9D%97/1627129895534-b391bb34-a23a-4880-9c72-df6b0499dde6.png" alt="image.png"><br><a name="SGdpc"></a></p><h1 id="同步块"><a href="#同步块" class="headerlink" title="同步块"></a>同步块</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">同步块: 同步块可以锁任何对象</span><br><span class="line"><span class="keyword">synchronized</span> (Obj)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Obj称之为同步监视器<ul><li>Obj可以是任何对象,但是推荐使用共享资源作为同步监视器</li><li><strong>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this，就是这个对象本身，或者是class 。</strong></li></ul></li><li><strong>同步监视器的执行过程</strong></li></ul><p>1.第一个线程访问，锁定同步监视器,执行其中代码。<br>2.第二个线程访问 ，发现同步监视器被锁定,无法访问。<br>3. 第一个线程访问完毕，解锁同步监视器。<br>4.第二个线程访问，发现同步监视器没有锁,然后锁定并访问。<br>​</p><p><a name="nVjql"></a></p><h1 id="解决不安全问题"><a href="#解决不安全问题" class="headerlink" title="解决不安全问题"></a>解决不安全问题</h1><p><a name="BmYe2"></a></p><h2 id="买票"><a href="#买票" class="headerlink" title="买票"></a>买票</h2><p>利用同步方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//买票</span><br><span class="line">    //synchronized 同步方法，锁的是this</span><br><span class="line">    private synchronized void buy() &#123;</span><br><span class="line">        //判断是否有票</span><br><span class="line">        if(ticketNum <span class="tag">&lt;<span class="name">=</span> <span class="attr">0</span>)&#123;</span></span><br><span class="line"><span class="tag">            <span class="attr">flag</span> = <span class="string">false;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">return</span>;</span></span><br><span class="line"><span class="tag">        &#125;</span></span><br><span class="line"><span class="tag">        <span class="attr">try</span> &#123;</span></span><br><span class="line"><span class="tag">            <span class="attr">Thread.sleep</span>(<span class="attr">100</span>);</span></span><br><span class="line"><span class="tag">        &#125; <span class="attr">catch</span> (<span class="attr">InterruptedException</span> <span class="attr">e</span>) &#123;</span></span><br><span class="line"><span class="tag">            <span class="attr">e.printStackTrace</span>();</span></span><br><span class="line"><span class="tag">        &#125;</span></span><br><span class="line"><span class="tag">        <span class="attr">System.out.println</span>(<span class="attr">Thread.currentThread</span>()<span class="attr">.getName</span>() + "拿到第" + <span class="attr">ticketNum--</span> + "张票");</span></span><br><span class="line"><span class="tag">    &#125;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/08/27/%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E5%8F%8A%E5%90%8C%E6%AD%A5%E5%9D%97/1627130398386-80b9e960-328e-44dc-919e-00ae5cc5e780.png" alt="image.png"><br></p><p><a name="duGxu"></a></p><h2 id="账户"><a href="#账户" class="headerlink" title="账户"></a>账户</h2><p>在账户用同步方法发现数据还是出现问题了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取钱</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断有没有钱</span></span><br><span class="line">   <span class="keyword">if</span> (account.money - drawingMoney &lt;<span class="number">0</span>)&#123;</span><br><span class="line">       System.out.println(Thread.currentThread().getName()+<span class="string">"钱不够，取不了"</span>);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//sleep可以放大问题的发生性</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//卡内余额的钱 = 余额 - 取的钱</span></span><br><span class="line">   account.money = account.money - drawingMoney;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//手里的钱</span></span><br><span class="line">    nowmoney = nowmoney + account.money;</span><br><span class="line"></span><br><span class="line">    System.out.println(account.name+<span class="string">"余额为："</span>+account.money);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//this.getName() == Thread.currentThread().getName() 因为 Drawing 继承了 Thread</span></span><br><span class="line">    System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"手里的钱为："</span>+account.money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/27/%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E5%8F%8A%E5%90%8C%E6%AD%A5%E5%9D%97/1627131216247-220f37f7-5390-4c7d-98e5-ce0ebedc68f5.png" alt="image.png"><br>为什么呢？<br>因为修改银行余额，修改的不是银行类（当前类），而是账户类（用户）的余额。所以应该锁用户才对。<br>但是同步方法默认锁的是当前类(this)，所以我们应该用同步块，它可以锁任意对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取钱</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (account) &#123;</span><br><span class="line">            <span class="comment">//判断有没有钱</span></span><br><span class="line">            <span class="keyword">if</span> (account.money - drawingMoney &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"钱不够，取不了"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//sleep可以放大问题的发生性</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//卡内余额的钱 = 余额 - 取的钱</span></span><br><span class="line">            account.money = account.money - drawingMoney;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//手里的钱</span></span><br><span class="line">            nowmoney = nowmoney + account.money;</span><br><span class="line"></span><br><span class="line">            System.out.println(account.name + <span class="string">"余额为："</span> + account.money);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//this.getName() == Thread.currentThread().getName() 因为 Drawing 继承了 Thread</span></span><br><span class="line">            System.out.println(<span class="keyword">this</span>.getName() + <span class="string">"手里的钱为："</span> + account.money);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/27/%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E5%8F%8A%E5%90%8C%E6%AD%A5%E5%9D%97/1627131063173-a1fe19cd-a987-45ab-9eca-6e78cc63288b.png" alt="image.png"><br></p><p><a name="YYDT6"></a></p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line">                    list.add(Thread.currentThread().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br></pre></td></tr></table></figure><p><img src="/2021/08/27/%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E5%8F%8A%E5%90%8C%E6%AD%A5%E5%9D%97/1627131454101-8224be0f-4b5b-42e1-81d9-d11ebb081879.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 同步方法及同步块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三大不安全案例</title>
      <link href="/2021/08/27/%E4%B8%89%E5%A4%A7%E4%B8%8D%E5%AE%89%E5%85%A8%E6%A1%88%E4%BE%8B/"/>
      <url>/2021/08/27/%E4%B8%89%E5%A4%A7%E4%B8%8D%E5%AE%89%E5%85%A8%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p><a name="VAVhd"></a></p><h1 id="案例一-买票-："><a href="#案例一-买票-：" class="headerlink" title="案例一(买票)："></a>案例一(买票)：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不安全的买票</span></span><br><span class="line"><span class="comment">//线程不安全</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNum = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//买票</span></span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            buy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//买票</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断是否有票</span></span><br><span class="line">        <span class="keyword">if</span>(ticketNum &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"拿到第"</span> + ticketNum-- + <span class="string">"张票"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuyTicket buyTicket = <span class="keyword">new</span> BuyTicket();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket,<span class="string">"苦逼的我"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket,<span class="string">"牛逼的你们"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket,<span class="string">"可恶的黄牛党"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现结果有很多种情况如复数，0，-1。或者两个人买到了同一张票<br><img src="/2021/08/27/%E4%B8%89%E5%A4%A7%E4%B8%8D%E5%AE%89%E5%85%A8%E6%A1%88%E4%BE%8B/1627126901531-aff2d25a-92f6-41b4-8e53-144a87a5e406.png" alt="image.png"><br><img src="/2021/08/27/%E4%B8%89%E5%A4%A7%E4%B8%8D%E5%AE%89%E5%85%A8%E6%A1%88%E4%BE%8B/1627126915201-1d1d775c-3aa6-476e-9245-1ee9dfc0d045.png" alt="image.png"><br><a name="rs65T"></a></p><h2 id="发现问题："><a href="#发现问题：" class="headerlink" title="发现问题："></a>发现问题：</h2><p>多个线程操作同一个资源的情况下，线程不安全，数据混乱。（拿到两个一样得东西 或者 拿到不存在的数据）</p><p><strong>两个人买到同一张票好理解，但是这个复数和-1是怎么来的呢？</strong><br><strong>比如3个人（A，B，C）买票，因为没有锁，没有同步，3个人看到的都是第1票A买完就剩下0张，—-》A买了第1张</strong><br><strong>因为在A买最后一张票的时候，B看到的是1，所以依旧能够进行资源抢夺，所以A买完后剩下0张—-》B买了第0张票</strong><br><strong>同理C也是看到的是1张票，所以进入资源抢夺，B买完后，剩下-1，—》C买了第-1张票</strong></p><p><a name="Tl1hK"></a></p><h1 id="案例二（银行取钱）："><a href="#案例二（银行取钱）：" class="headerlink" title="案例二（银行取钱）："></a>案例二（银行取钱）：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不安全的取钱</span></span><br><span class="line"><span class="comment">//两个人去银行取钱，账户</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SafeBank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//账户</span></span><br><span class="line">        Account account = <span class="keyword">new</span> Account(<span class="number">100</span>, <span class="string">"结婚基金"</span>);</span><br><span class="line"></span><br><span class="line">        Drawing you = <span class="keyword">new</span> Drawing(account, <span class="number">50</span>, <span class="string">"你"</span>);</span><br><span class="line">        Drawing girlfriend = <span class="keyword">new</span> Drawing(account, <span class="number">100</span>, <span class="string">"girlfriend"</span>);</span><br><span class="line"></span><br><span class="line">        you.start();</span><br><span class="line">        girlfriend.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//账户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> money; <span class="comment">//余额</span></span><br><span class="line">     String name;<span class="comment">//卡名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> money, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//银行：模拟取款</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawing</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     Account account;<span class="comment">//账户</span></span><br><span class="line">     <span class="keyword">int</span> drawingMoney;<span class="comment">//取了多少钱</span></span><br><span class="line">     <span class="keyword">int</span> nowmoney;<span class="comment">//手里的钱</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Drawing</span><span class="params">(Account account, <span class="keyword">int</span> drawingMoney, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.account = account;</span><br><span class="line">        <span class="keyword">this</span>.drawingMoney = drawingMoney;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取钱</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="comment">//判断有没有钱</span></span><br><span class="line">       <span class="keyword">if</span> (account.money - drawingMoney &lt;<span class="number">0</span>)&#123;</span><br><span class="line">           System.out.println(Thread.currentThread().getName()+<span class="string">"钱不够，取不了"</span>);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//卡内余额的钱 = 余额 - 取的钱</span></span><br><span class="line">       account.money = account.money - drawingMoney;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//手里的钱</span></span><br><span class="line">        nowmoney = nowmoney + drawingMoney;</span><br><span class="line"></span><br><span class="line">        System.out.println(account.name+<span class="string">"余额为："</span>+account.money);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//this.getName() == Thread.currentThread().getName() 因为 Drawing 继承了 Thread</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"手里的钱为："</span>+account.money);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><img src="/2021/08/27/%E4%B8%89%E5%A4%A7%E4%B8%8D%E5%AE%89%E5%85%A8%E6%A1%88%E4%BE%8B/1627128906381-cb21d063-daf1-4966-97a5-ba064a322f4d.png" alt="image.png" style="zoom:50%;"><br><a name="avk57"></a></p><h1 id="案例三：（集合不安全）"><a href="#案例三：（集合不安全）" class="headerlink" title="案例三：（集合不安全）"></a>案例三：（集合不安全）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hbf.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: Mr Li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 20:17 2021/7/24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.hbf.demo01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程不安全集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SafeList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                list.add(Thread.currentThread().getName());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/27/%E4%B8%89%E5%A4%A7%E4%B8%8D%E5%AE%89%E5%85%A8%E6%A1%88%E4%BE%8B/1627129498987-e2f35986-0dc7-45ab-9681-a40fa63d7bc5.png" alt="image.png" style="zoom:50%;"><br>应该是10000个才对！！</p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 三大不安全案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程同步机制</title>
      <link href="/2021/08/27/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/"/>
      <url>/2021/08/27/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p><a name="BwktE"></a></p><h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><p>并发：同一个对象被多个线程同时操作<br>​</p><p>比如上万人枪100张票，两个银行同事取钱<br>​<br><br><a name="PjSfJ"></a></p><h1 id="队列-和-锁"><a href="#队列-和-锁" class="headerlink" title="队列 和 锁"></a>队列 和 锁</h1><p>现实生活中，我们会遇到”同一个资源,多个人都想使用”的问题，比如，食堂排队<br>打饭,每个人都想吃饭,最天然的解决办法就是排队。 一个个来。 【队列】</p><p>处理多线程问题时，多个线程访问同一个对象【并发】，并且某些线程还想修改这个对象。这时候我们就需要线程同步。线程同步其实就是一 种等待机制，多个需要同时访问此对象的线程进入这个<font color="red">对象的等待池</font>形成队列，等待前面线程使用完毕，下一个线程再使用。</p><p><font color="red">队列 加 锁 </font> 才能实现同步的安全性<br>​<br><br><a name="vNbjS"></a></p><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><p>由于同一进程的多个线程共享同一块存储空间，在带来方便的同时，也带来了访问<br>冲突问题，为了保证数据在方法中被访问时的正确性，在访问时加入<strong><font color="red">锁机制<br>synchronized</font></strong> ，当一个线程获得对象的排它锁，独占资源，其他线程必须等待，使用后释放锁即可存在以下问题:</p><ul><li>一个线程持有锁会导致其他所有需要此锁的线程挂起。</li><li>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引<br>起性能问题；</li><li>如果一个优先级高的线程等待一个优先级低的线程释放锁 会导致优先级倒<br>置，引起性能问题。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程同步机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC 安全测试（扩充）</title>
      <link href="/2021/08/27/JUC%20%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%EF%BC%88%E6%89%A9%E5%85%85%EF%BC%89/"/>
      <url>/2021/08/27/JUC%20%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%EF%BC%88%E6%89%A9%E5%85%85%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><code>CopyOnWriteArrayList</code>本身就是安全的！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试JUC安全类型的集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJuc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CopyOnWriteArrayList&lt;String&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                list.add(Thread.currentThread().getName());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>![image.png](JUC 安全测试（扩充）/1627131835629-4d95fb2c-d883-48ef-880e-987cce6d7399.png)</p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC 安全测试（扩充） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sleep和 wait的异同</title>
      <link href="/2021/08/27/sleep%E5%92%8C%20wait%E7%9A%84%E5%BC%82%E5%90%8C/"/>
      <url>/2021/08/27/sleep%E5%92%8C%20wait%E7%9A%84%E5%BC%82%E5%90%8C/</url>
      
        <content type="html"><![CDATA[<p>相同点：</p><ul><li>都可以使得当前的线程进入阻塞状态</li></ul><p>不同点：</p><ul><li>位置不同：<ul><li>sleep（）声明在Thread类中</li><li>wait（）声明在Object类中</li></ul></li><li>sleep可以在任何场景调用，wait（）必须使用在同步方法或者同步块中</li><li>sleep不会释放锁，wait会释放锁</li></ul>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sleep和 wait的异同 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>守护线程（daemon）</title>
      <link href="/2021/08/27/%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B%EF%BC%88daemon%EF%BC%89/"/>
      <url>/2021/08/27/%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B%EF%BC%88daemon%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>线程分为用户线程和守护线程</li><li>虚拟机必须确保用户线程执行完毕</li><li>虚拟机不用等待守护线程执行完毕</li><li>如，后台记录操作日志，监控内存，垃圾回收等待。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上帝守护你</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemon</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        God god = <span class="keyword">new</span> God();</span><br><span class="line">        YOU you = <span class="keyword">new</span> YOU();</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(god);</span><br><span class="line">        <span class="comment">//默认是false表示用户线程，正常的线程都是用户线程</span></span><br><span class="line">        thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        thread.start();<span class="comment">//上帝保佑着你</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(you).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上帝</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">God</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"上帝保护着你"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//你</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YOU</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">36500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"你一生都开学的活着"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"======goodbye! world!========"</span>);<span class="comment">//Hello world</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/08/27/%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B%EF%BC%88daemon%EF%BC%89/1627125143081-25d05b01-f24b-41dc-8dc9-2324b33c198e.png" alt="image.png" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 守护线程（daemon） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程的优先级</title>
      <link href="/2021/08/27/%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7/"/>
      <url>/2021/08/27/%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<p>Java提供一个线程调度器来监控程序中启动后进 入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行。</p><ul><li><p>线程的优先级用数字表示，范围从1~10.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread.MIN PRIORITY=<span class="number">1</span>; <span class="comment">//最小</span></span><br><span class="line">Thread.MAX_ PRIORITY = <span class="number">10</span>; <span class="comment">//最大</span></span><br><span class="line">Thread.NORM_ PRIORITY = <span class="number">5</span>; <span class="comment">//默认</span></span><br></pre></td></tr></table></figure><p>使用以下方式改变或获取优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取线程优先级</span></span><br><span class="line">getPriority()</span><br><span class="line"><span class="comment">//设置线程优先级</span></span><br><span class="line">setPriority(<span class="keyword">int</span> xxx)</span><br></pre></td></tr></table></figure></li><li><p>JAVA调度方法：</p><ul><li>同优先级线程组成<font color="red">先进先出队列(先到先服务)</font>，使用时间片策略</li><li>对高优先级，使用<font color="red">优先调度的抢占式策略</font></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试线程的优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPriority</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//主线程的优先级</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"---&gt;"</span>+Thread.currentThread().getPriority());</span><br><span class="line"></span><br><span class="line">        MyPriority myPriority = <span class="keyword">new</span> MyPriority();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t5 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t6 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先设置优先级再启动</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        t2.setPriority(<span class="number">1</span>);</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        t3.setPriority(<span class="number">4</span>);</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">        t4.setPriority(Thread.MAX_PRIORITY); <span class="comment">//MAX_PRIORITY = 10</span></span><br><span class="line">        t4.start();</span><br><span class="line"></span><br><span class="line">        t5.setPriority(<span class="number">8</span>);</span><br><span class="line">        t5.start();</span><br><span class="line"></span><br><span class="line">        t6.setPriority(<span class="number">7</span>);</span><br><span class="line">        t6.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPriority</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"---&gt;"</span>+Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/08/27/%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7/1627123643627-b6f7aa10-8f06-4bfc-8be5-d86e84cf55bf.png" alt="image.png" style="zoom:50%;"><font color="red">优先级低只是意味着获得调度的概率低.</font><font color="red">并不是优先级低就不会被调用了.</font><font color="red">这都是看CPU的调度</font>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程的优先级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Join(强制执行)</title>
      <link href="/2021/08/27/Join(%E5%BC%BA%E5%88%B6%E6%89%A7%E8%A1%8C)/"/>
      <url>/2021/08/27/Join(%E5%BC%BA%E5%88%B6%E6%89%A7%E8%A1%8C)/</url>
      
        <content type="html"><![CDATA[<p>Join合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试Join，插队</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"线程vip来了"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        TestJoin testJoin = <span class="keyword">new</span> TestJoin();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(testJoin);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//主线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">200</span>)&#123;</span><br><span class="line">                thread.join();<span class="comment">//插队</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"main"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/27/Join(%E5%BC%BA%E5%88%B6%E6%89%A7%E8%A1%8C)/1627116812307-ca0c390e-9aa8-47cd-b85b-7d7dea57c985.png" alt="image.png" style="zoom: 33%;"><br><img src="/2021/08/27/Join(%E5%BC%BA%E5%88%B6%E6%89%A7%E8%A1%8C)/1627116834549-1859c3fb-182f-418f-b483-f1c6aca4828f.png" alt="image.png" style="zoom:33%;"></p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Join(强制执行) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程礼让</title>
      <link href="/2021/08/27/%E7%BA%BF%E7%A8%8B%E7%A4%BC%E8%AE%A9yield/"/>
      <url>/2021/08/27/%E7%BA%BF%E7%A8%8B%E7%A4%BC%E8%AE%A9yield/</url>
      
        <content type="html"><![CDATA[<ul><li>礼让线程，让当前正在执行的线程暂停，但不阻塞</li><li>将线程从运行状态转为就绪状态</li><li><strong>让cpu重新调度，礼让不一定成功! 看CPU心情</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//礼让不一定成功，看cpu心情</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestYield</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyYield myYield = <span class="keyword">new</span> MyYield();</span><br><span class="line">        <span class="keyword">new</span> Thread(myYield,<span class="string">"A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(myYield,<span class="string">"B"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyYield</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"线程开始执行"</span>);</span><br><span class="line">        Thread.yield();<span class="comment">//礼让</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"线程停止执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>礼让成功<br><img src="/2021/08/27/%E7%BA%BF%E7%A8%8B%E7%A4%BC%E8%AE%A9yield/1627116357013-e804b2ee-97d3-4aeb-9576-ebde5c9b0933.png" alt="image.png" style="zoom:50%;"></p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程礼让 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程休眠</title>
      <link href="/2021/08/27/%E7%BA%BF%E7%A8%8B%E4%BC%91%E7%9C%A0/"/>
      <url>/2021/08/27/%E7%BA%BF%E7%A8%8B%E4%BC%91%E7%9C%A0/</url>
      
        <content type="html"><![CDATA[<ul><li>sleep (时间)指定当前线程阻塞的毫秒数</li><li>sleep存在异常InterruptedException.</li><li>sleep时间达到后线程进入就绪状态;</li><li>sleep可以模拟网络延时，倒计时等。</li><li>每一个对象都有一个锁， sleep不会释放锁;</li></ul><p>模拟倒计时:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟倒计时</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        tenDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tenDown</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(num--);</span><br><span class="line">            <span class="keyword">if</span> (num &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取当前时间:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//打印当前系统时间</span></span><br><span class="line">        Date startTime = <span class="keyword">new</span> Date(System.currentTimeMillis());<span class="comment">//获取系统当前时间</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>).format(startTime));</span><br><span class="line">            startTime = <span class="keyword">new</span> Date(System.currentTimeMillis());<span class="comment">//更新当前时间</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程休眠 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程停止</title>
      <link href="/2021/08/27/%E7%BA%BF%E7%A8%8B%E5%81%9C%E6%AD%A2/"/>
      <url>/2021/08/27/%E7%BA%BF%E7%A8%8B%E5%81%9C%E6%AD%A2/</url>
      
        <content type="html"><![CDATA[<ul><li>不推荐使用JDK提供的stop()、destroy()方法。[已废弃]</li><li>推荐线程自己停止下来</li><li>建议使用一个标志位进行终止变量</li><li>当 flag=false，则终止线程运行。</li></ul><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.建议线程正常停止-----&gt; 利用次数，不建议死循环</span></span><br><span class="line"><span class="comment">//2.建议使用标志位-----&gt; 设置一个标志位</span></span><br><span class="line"><span class="comment">//3. 不要使用stop 或者 destory 等过时 或者 JDK不建议使用的方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStop</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置一个标志位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">"run...Thread"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.设置一个公开的方法停止线程，转换标志位</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestStop testStop = <span class="keyword">new</span> TestStop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(testStop).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"main"</span> + i);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">900</span>)&#123;</span><br><span class="line">                <span class="comment">//调用stop 方法切换标志位</span></span><br><span class="line">                testStop.stop();</span><br><span class="line">                System.out.println(<span class="string">"线程停止了"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/08/27/%E7%BA%BF%E7%A8%8B%E5%81%9C%E6%AD%A2/1627115002142-a7560788-2054-4325-9196-3864d4130531.png" alt="image.png" style="zoom:33%;">]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程停止 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观测线程状态</title>
      <link href="/2021/08/27/%E8%A7%82%E6%B5%8B%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/"/>
      <url>/2021/08/27/%E8%A7%82%E6%B5%8B%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<p><img src="/2021/08/27/%E8%A7%82%E6%B5%8B%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/1627113832133-1c7f3f49-a91d-4154-b5b6-1a1ad61cbb18.png" alt></p><ul><li>线程状态。线程可以处于以下状态之一：<ul><li><a href="../../java/lang/Thread.State.html#NEW">NEW</a>   尚未启动的线程处于此状态。</li><li><a href="../../java/lang/Thread.State.html#RUNNABLE">RUNNABLE</a>  在Java虚拟机中执行的线程处于此状态。</li><li><a href="../../java/lang/Thread.State.html#BLOCKED">BLOCKED</a>       被阻塞等待监视器锁定的线程处于此状态。</li><li><a href="../../java/lang/Thread.State.html#WAITING">WAITING</a>    正在等待另一个线程执行特定动作的线程处于此状态。</li><li><a href="../../java/lang/Thread.State.html#TIMED_WAITING">TIMED_WAITING</a>    正在等待另一个线程执行动作达到指定等待时间的线程处于此状态。</li><li><a href="../../java/lang/Thread.State.html#TERMINATED">TERMINATED</a>    已退出的线程处于此状态。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//观察测试线程的状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"//////"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//观察状态</span></span><br><span class="line">        Thread.State state = thread.getState();</span><br><span class="line">        System.out.println(state);<span class="comment">//NEW</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//观察启动后</span></span><br><span class="line">        thread.start();<span class="comment">//启动线程</span></span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state);<span class="comment">//RUNNABLE</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (state != Thread.State.TERMINATED)&#123; <span class="comment">//只要线程不终止，就一直输出状态</span></span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            state = thread.getState(); <span class="comment">//更新状态</span></span><br><span class="line">            System.out.println(state); <span class="comment">//输出状态</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/08/27/%E8%A7%82%E6%B5%8B%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/1627121952510-636282f7-5033-4b13-b2c2-1f0babedd152.png" alt="image.png" style="zoom:33%;"></li></ul></li></ul><img src="/2021/08/27/%E8%A7%82%E6%B5%8B%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/1627121957361-05db1756-6e01-45ad-b3e8-fe9039683b0b.png" alt="image.png" style="zoom:33%;"><p>死亡之后的线程就不能在启动了<br><img src="/2021/08/27/%E8%A7%82%E6%B5%8B%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/1627122287137-2a275a8d-4a69-43bf-9341-e35ecd335358.png" alt="image.png" style="zoom:33%;"><br><img src="/2021/08/27/%E8%A7%82%E6%B5%8B%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/1627122281083-2e5b1ce4-1051-47d7-b01c-28a08200ad70.png" alt="image.png" style="zoom:33%;"></p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观测线程状态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程方法</title>
      <link href="/2021/08/27/%E7%BA%BF%E7%A8%8B%E6%96%B9%E6%B3%95/"/>
      <url>/2021/08/27/%E7%BA%BF%E7%A8%8B%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="/2021/08/27/%E7%BA%BF%E7%A8%8B%E6%96%B9%E6%B3%95/1627114004347-d8fbde17-87be-4f13-9e58-c1d5585019ab.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程状态（生命周期）</title>
      <link href="/2021/08/27/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%EF%BC%88%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%89/"/>
      <url>/2021/08/27/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%EF%BC%88%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><img src="/2021/08/27/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%EF%BC%88%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%89/1627113861114-db27d581-cb4a-4884-95cd-16a1fd7248b3.png" alt="image.png"><br><br><img src="/2021/08/27/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%EF%BC%88%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%89/1627113832133-1c7f3f49-a91d-4154-b5b6-1a1ad61cbb18.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程状态（生命周期） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态代理模式</title>
      <link href="/2021/08/27/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/08/27/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><a name="kg7Hp"></a></p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//真实角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我要结婚了！，超开心"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理角色，婚前公司</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeddingCompany</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Marry target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeddingCompany</span><span class="params">(Marry target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        <span class="keyword">this</span>.target.HappyMarry();</span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"结婚之前"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"结婚之后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lambda表达式</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; System.out.println(<span class="string">"我爱你"</span>)).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         new Thread(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void run() &#123;</span></span><br><span class="line"><span class="comment">                System.out.println("我爱你");</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;).start();</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        WeddingCompany weddingCompany = <span class="keyword">new</span> WeddingCompany(<span class="keyword">new</span> You());</span><br><span class="line">        weddingCompany.HappyMarry();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="SpgLl"></a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>目标对象和代理对象都要实现同一个接口<br>代理对象要代理真实角色</p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态代理模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lambda表达式</title>
      <link href="/2021/08/27/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2021/08/27/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<ul><li>避免匿名内部类定义过多</li><li>其实质属于函数式编程的概念<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(params) -&gt; expression [表达式]</span><br><span class="line">(params) -&gt; statement[语句]</span><br><span class="line">(params) -&gt; &#123;statements&#125;</span><br></pre></td></tr></table></figure><a name="e2VrO"></a></li></ul><h1 id="为什么要使用lambda表达式"><a href="#为什么要使用lambda表达式" class="headerlink" title="为什么要使用lambda表达式"></a>为什么要使用lambda表达式</h1><ul><li>避免匿名内部类定义过多</li><li>可以让你的代码看起来很简洁</li><li>去掉了一堆没有意义的代码，只留下核心的逻辑。</li></ul><p>函数式接口的定义：</p><ul><li><p>任何接口，如果只包含唯-一个抽象方法，那么它就是一个函数式接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对于函数式接口，我们可以通过lambda表达式来创建该接口的对象。</p></li></ul><p>推导：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  推导lambda表达式</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Like2</span> <span class="keyword">implements</span> <span class="title">ILike</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"i like lambda2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ILike like = <span class="keyword">new</span> Like();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        like = <span class="keyword">new</span> Like2();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Like3</span> <span class="keyword">implements</span> <span class="title">ILike</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"i like lambda3"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        like = <span class="keyword">new</span> Like3();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.匿名内部类</span></span><br><span class="line">        like = <span class="keyword">new</span> ILike() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"i like lambda4"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.用lambda简化</span></span><br><span class="line">        like = ()-&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"i like lambda5"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        like.lambda();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.定义一个接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Like</span> <span class="keyword">implements</span> <span class="title">ILike</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"i like lambda"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="vdyi9"></a></p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lambda表达式简化</span></span><br><span class="line">        Ilove love = (<span class="keyword">int</span> a) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"i love you "</span> + a);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//简化1.参数类型</span></span><br><span class="line">        love = (a) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"i love you "</span> + a);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//简化2.简化括号</span></span><br><span class="line">        love = a -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"i love you "</span> + a);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//简化3.去掉花括号</span></span><br><span class="line">        love = a -&gt; System.out.println(<span class="string">"i love you "</span> + a);</span><br><span class="line"></span><br><span class="line">        love.love(<span class="number">521</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Ilove</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">love</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="pNUTZ"></a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>lambda表达式只能有一行代码的情况下才能简化，如果有多行，那么就用代码块包裹。</li><li>前提是接口是函数式接口</li><li>多个参数也可以去掉参数类型，但是必须加上括号</li></ul>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比较创建线程的两种方式</title>
      <link href="/2021/08/27/%E6%AF%94%E8%BE%83%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2021/08/27/%E6%AF%94%E8%BE%83%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>继承Thread类：</p><ul><li>子类继承Thread类具备多线程能力</li><li>启动线程:子类对象. start()</li><li>不建议使用:避免OOP单继承局限性</li></ul><p>实现Runnable接口个</p><ul><li>实现接口Runnable具有多线程能力</li><li>启动线程:传入目标对象+ Thread对象.start()</li><li>推荐使用:避免单继承局限性，灵活方便，方便同一个对象被多个线程使用</li></ul><p>比较：<br>开发中：优先选择实现Runnable接口的方式<br>原因：</p><ol><li>实现的方式没有类的单继承性的局限性</li><li>实现的方式更适合来处理多个线程的共享数据</li></ol><p>联系：</p><ul><li>Thread类也实现了Runnable接口</li></ul><p>相同点：</p><ul><li>都需要重新run（）方法</li></ul><br>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比较创建线程的两种方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何理解实现Callable接口方式创建线程步实现Runnable强</title>
      <link href="/2021/08/27/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E5%AE%9E%E7%8E%B0Callable%E6%8E%A5%E5%8F%A3%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%AD%A5%E5%AE%9E%E7%8E%B0Runnable%E5%BC%BA/"/>
      <url>/2021/08/27/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E5%AE%9E%E7%8E%B0Callable%E6%8E%A5%E5%8F%A3%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%AD%A5%E5%AE%9E%E7%8E%B0Runnable%E5%BC%BA/</url>
      
        <content type="html"><![CDATA[<p>与Runnable相比，Callable更强大些</p><ul><li>相比run方法，可以有返回值</li><li>方法可以抛出异常</li><li>支持泛型返回值</li><li>需要借助FutureTask类，比如获取返回值</li></ul>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 如何理解实现Callable接口方式创建线程步实现Runnable强 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现Callable接口</title>
      <link href="/2021/08/27/%E5%AE%9E%E7%8E%B0Callable%E6%8E%A5%E5%8F%A3/"/>
      <url>/2021/08/27/%E5%AE%9E%E7%8E%B0Callable%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">- 实现Callable接口，需要返回值类型- 重写call方法，需要抛出异常- 创建目标对象<p>步骤：</p><ul><li>创建执行服务: ExecutorService ser = Executors.newFixedThreadPool(1);</li><li>提交执行: Future<Boolean> result1 = ser.submit(t1);</Boolean></li><li>获取结果: boolean r1 = result1.get()</li><li>关闭服务: ser.shutdownNow();</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;  <span class="comment">//网络图片地址</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//保存文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">TestCallable</span><span class="params">(String url, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebDownload webDownload = <span class="keyword">new</span> WebDownload();</span><br><span class="line">        webDownload.download(url, name);</span><br><span class="line">        System.out.println(<span class="string">"下载了文件名为:"</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        TestCallable t1 = <span class="keyword">new</span> TestCallable(<span class="string">"https://mmbiz.qpic.cn/mmbiz_jpg/uChmeeX1FpyB6WkMTL2IUapfTtGH6FFOialcoD9IRXH5jUskMiaHfPd8AKmWZYGAerLH3bpulF72IYhrK2kuia9Pg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1"</span>,<span class="string">"1.png"</span>);</span><br><span class="line">        TestCallable t2 = <span class="keyword">new</span> TestCallable(<span class="string">"https://mmbiz.qpic.cn/mmbiz_jpg/uChmeeX1FpyB6WkMTL2IUapfTtGH6FFOialcoD9IRXH5jUskMiaHfPd8AKmWZYGAerLH3bpulF72IYhrK2kuia9Pg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1"</span>,<span class="string">"2.png"</span>);</span><br><span class="line">        TestCallable t3 = <span class="keyword">new</span> TestCallable(<span class="string">"https://mmbiz.qpic.cn/mmbiz_jpg/uChmeeX1FpyB6WkMTL2IUapfTtGH6FFOialcoD9IRXH5jUskMiaHfPd8AKmWZYGAerLH3bpulF72IYhrK2kuia9Pg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1"</span>,<span class="string">"3.png"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建执行服务:</span></span><br><span class="line">        ExecutorService ser = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//提交执行:</span></span><br><span class="line">        Future&lt;Boolean&gt; r1 = ser.submit(t1);</span><br><span class="line">        Future&lt;Boolean&gt; r2 = ser.submit(t2);</span><br><span class="line">        Future&lt;Boolean&gt; r3 = ser.submit(t3);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 获取结果:</span></span><br><span class="line">        <span class="keyword">boolean</span> rs1 = r1.get();</span><br><span class="line">        <span class="keyword">boolean</span> rs2 = r2.get();</span><br><span class="line">        <span class="keyword">boolean</span> rs3 = r3.get();</span><br><span class="line">        <span class="comment">//关闭服务:</span></span><br><span class="line">         ser.shutdownNow();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下载器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDownload</span> </span>&#123;</span><br><span class="line">    <span class="comment">//下载方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(String url, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url), <span class="keyword">new</span> File(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"IO异常，download方法出现问题"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/08/27/%E5%AE%9E%E7%8E%B0Callable%E6%8E%A5%E5%8F%A3/1627108234408-06caab19-4487-4600-872e-01b7513e553a.png" alt="image.png" style="zoom:67%;"><br><p><a name="bQctt"></a></p><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>与Runnable相比，Callable更强大些</p><ul><li>相比run方法，可以有返回值</li><li>方法可以抛出异常</li><li>支持泛型返回值</li><li>需要借助FutureTask类，比如获取返回值</li></ul>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实现Callable接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Runnable</title>
      <link href="/2021/08/27/Runnable/"/>
      <url>/2021/08/27/Runnable/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><ul><li>定义MyRunnable类实现Runnable接口</li><li>实现run()方法,编写线程执行体</li><li>创建线程对象，调用start()方法启动线程。</li></ul><p>注意：<br>通过实现Runnable方法启动的线程。通过Thread类调用start（）方法启动线程，调用当前线程的润方法。===》但是它调用的是Runnable类型的target的run（）方法。<br><img src="/2021/08/27/Runnable/1627270188753-f8bbf44b-20d2-4d25-86e1-2275a86c54b1.png" alt="image"></p><p><img src="/2021/08/27/Runnable/1627270194378-38e3488f-27bb-454d-b106-728aab2e9ee4.png" alt="image"></p><p><img src="/2021/08/27/Runnable/1627270209954-f7dc5667-59fb-457b-818a-72f9c9854a46.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现runnable接口，重写run方法，执行线程需要丢入runnable接口实现，调用start方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//run方法线程体</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"我在写代码=========="</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建runnable接口的实现类</span></span><br><span class="line">        TestThread testThread = <span class="keyword">new</span> TestThread();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程对象，通过线程对象来开启我们的线程，代理</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(testThread);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//mian线程，主线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"我在学习======="</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果一样！</p><p>因为java中支持单继承，而可以实现多个接口，所以一般用Runnable接口！</p><p><img src="/2021/08/27/Runnable/1627105152748-03704f0a-5add-4299-ae8c-c6b90caf4063.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Runnable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承Thread类</title>
      <link href="/2021/08/27/%E7%BB%A7%E6%89%BFThread%E7%B1%BB/"/>
      <url>/2021/08/27/%E7%BB%A7%E6%89%BFThread%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"># 开启线程<ul><li>自定义线程类继承Thread类，</li><li>重写run() 方法，编写线程知兴替</li><li>创建线程对象，调用start（）方法启动线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建线程方式：继承Thread类， 重写run()方法，调用start开启线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread01</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//run方法线程体</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"我在写代码=========="</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个线程对象</span></span><br><span class="line">        Thread01 thread01 = <span class="keyword">new</span> Thread01();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用start方法,开启线程，调用当前线程的run方法</span></span><br><span class="line">        thread01.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//mian线程，主线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"我在学习======="</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：交替！争抢线程</p><img src="/2021/08/27/%E7%BB%A7%E6%89%BFThread%E7%B1%BB/1627098531979-ad4eba13-6212-4265-ad57-caa87fa4c1b9.png" alt="image" style="zoom:80%;"><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ul><li>线程开启不一定，立即执行，由cpu调度</li><li>start方法启动当前线程，调用run方法</li><li>不能通过run（）方法启动线程，因为它没有开启另一个线程，依旧是主线程（main）在跑，而且按照方法前后顺序跑</li></ul><p><img src="/2021/08/27/%E7%BB%A7%E6%89%BFThread%E7%B1%BB/1627266773234-348c4aa6-d89b-4fc5-825c-732e95d3d26b.png" alt="image" style="zoom: 50%;"><img src="/2021/08/27/%E7%BB%A7%E6%89%BFThread%E7%B1%BB/1627266834731-a6ee25f4-690c-4c03-9578-9ba756b2c156.png" alt="image" style="zoom: 25%;"> </p><ul><li>不能让已经start过的线程，再次开启。因为下第一次调用start，它的状态是0，再次调用的时候，它的状态就不是0了，所以报一个异常。 </li></ul><img src="/2021/08/27/%E7%BB%A7%E6%89%BFThread%E7%B1%BB/1627267412001-7bad5094-c0dc-41f1-b7d9-d1c95ad6bb98.png" alt="image" style="zoom:67%;">想要再次启动需要重新创建一个线程<img src="/2021/08/27/%E7%BB%A7%E6%89%BFThread%E7%B1%BB/1627267502908-19321e47-347d-40f5-a56e-7347c01bdd42.png" alt="image" style="zoom:67%;"><a name="jnyUK"></a><h1 id="案例：下载图片"><a href="#案例：下载图片" class="headerlink" title="案例：下载图片"></a>案例：下载图片</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//联系Thread， 实现多线程同步下载</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread02</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;  <span class="comment">//网络图片地址</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//保存文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">TestThread02</span><span class="params">(String url, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下载图片的线程执行体</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebDownload webDownload = <span class="keyword">new</span> WebDownload();</span><br><span class="line">        webDownload.download(url, name);</span><br><span class="line">        System.out.println(<span class="string">"下载了文件名为:"</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestThread02 t1 = <span class="keyword">new</span> TestThread02(<span class="string">"https://mmbiz.qpic.cn/mmbiz_jpg/uChmeeX1FpyB6WkMTL2IUapfTtGH6FFOialcoD9IRXH5jUskMiaHfPd8AKmWZYGAerLH3bpulF72IYhrK2kuia9Pg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1"</span>,<span class="string">"1.png"</span>);</span><br><span class="line">        TestThread02 t2 = <span class="keyword">new</span> TestThread02(<span class="string">"https://mmbiz.qpic.cn/mmbiz_jpg/uChmeeX1FpyB6WkMTL2IUapfTtGH6FFOialcoD9IRXH5jUskMiaHfPd8AKmWZYGAerLH3bpulF72IYhrK2kuia9Pg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1"</span>,<span class="string">"2.png"</span>);</span><br><span class="line">        TestThread02 t3 = <span class="keyword">new</span> TestThread02(<span class="string">"https://mmbiz.qpic.cn/mmbiz_jpg/uChmeeX1FpyB6WkMTL2IUapfTtGH6FFOialcoD9IRXH5jUskMiaHfPd8AKmWZYGAerLH3bpulF72IYhrK2kuia9Pg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1"</span>,<span class="string">"3.png"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下载器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDownload</span> </span>&#123;</span><br><span class="line">    <span class="comment">//下载方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(String url, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url), <span class="keyword">new</span> File(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"IO异常，download方法出现问题"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/08/27/%E7%BB%A7%E6%89%BFThread%E7%B1%BB/1627104612911-ce35d8c4-68ed-4d8b-8702-709e2367ef64.png" alt="image" style="zoom: 67%;">发现下载顺序是不一样的]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 继承Thread类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用多线程的优点</title>
      <link href="/2021/08/27/%E4%BD%BF%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BC%98%E7%82%B9/"/>
      <url>/2021/08/27/%E4%BD%BF%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BC%98%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>背景:以单核CPU为例，只使用单个线程先后完成多个任务(调用多个方法)，肯定比用多个线程来完成用的时间更短，为何仍需多线程呢?<br><strong>多线程程序的优点:</strong><br>1.提高应用程序的响应。对图形化界面更有意义，可增强用户体验。<br>2.提高计算机系统CPU的利用率<br>3.改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和<br>修改。</p><p><strong>何时需要多线程：</strong><br>●程序需要同时执行两个或多个任务。<br>●程序需要实现一-些需要等待的任务时，如用户输入、文件读写、网络操作、搜索等。<br>●需要一些后台运行的程序时。</p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 使用多线程的优点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单核与多核cpu</title>
      <link href="/2021/08/27/%E5%8D%95%E6%A0%B8%E4%B8%8E%E5%A4%9A%E6%A0%B8cpu/"/>
      <url>/2021/08/27/%E5%8D%95%E6%A0%B8%E4%B8%8E%E5%A4%9A%E6%A0%B8cpu/</url>
      
        <content type="html"><![CDATA[<ul><li>单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。例如:虽然有多车道，但是收费站只有一个工作人员在收费，只有收了费才能通过，那么CPU就好比收费人员。如果有某个人不想交钱，那么收费人员可以把他“挂起”(晾着他，等他想通了，准备好了钱，再去收费)。但是因为CPU时间单元特别短，因此感觉不出来。</li><li>如果是多核的话，才能更好的发挥多线程的效率。(现在的服务 器都是多核的)</li><li><strong>一个Java应用程序java.exe， 其实至少有三个线程: main():主线程，gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。</strong></li></ul><p><strong>并行：多个CPU同时执行多个任务。比如:多个人同时做不同的事。</strong></p><p><strong>并发：一个CPU(采用时间片)同时执行多个任务。比如:秒杀、多个人做同一件事。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单核与多核cpu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程和线程的区别</title>
      <link href="/2021/08/27/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2021/08/27/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<ul><li><p>说起进程，就不得不说下程序。程序是指令和数据的有序集合，其本身没有任何运行的含义，是一 个静态的概念。</p></li><li><p>而进程则是执行程序的一次执行过程，它是一个动态的概念。是系统资源分配的单位</p></li><li><p>通常在一个进程中可以包含若干个线程，当然一个进程中至少有一 个线程， 不然没有存在的意义。线程是CPU调度和执行的的单位。</p></li></ul><ul><li><p><strong>核心概念：</strong></p><ul><li><font color="#FF0000">线程就是独立的执行路径; </font></li><li>在程序运行时，即使没有自己创建线程，后台也会有多个线程,如主线程，gc线程;</li><li>main()称之为主线程，为系统的入口，用于执行整个程序;</li><li>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能认为的干预的。</li><li>对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制; </li><li>线程会带来额外的开销，如cpu调度时间，并发控制开销。</li><li><font color="#FF0000">每个线程在自己的工作内存交互，内存控制不当会造成数据不一致</font></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进程和线程的区别 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
